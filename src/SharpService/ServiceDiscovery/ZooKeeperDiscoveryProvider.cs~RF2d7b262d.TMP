using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using SharpService.Configuration;
using ZKClientNET.Client;
using ZKClientNET.Serialize;
using System.Configuration;

namespace SharpService.ServiceDiscovery
{
    public class ZooKeeperDiscoveryProvider : ServiceDiscoveryProvider, IServiceDiscoveryProvider
    {
       private ZKClient zkClient { set; get; }

        private const string registryConfig = "serviceGroup/registryConfig";
        private readonly RegistryConfiguration registryConfiguration = ConfigurationManager.GetSection(registryConfig) as RegistryConfiguration;

        public ZooKeeperDiscoveryProvider()
        {
            zkClient = ZKClientBuilder.NewZKClient(registryConfiguration.Address)
                           .SessionTimeout(10000)
                           .ConnectionTimeout(registryConfiguration.ConnectTimeout)
                           .Serializer(new SerializableSerializer())
                           .Build();
        }

        public async Task RegisterServiceAsync()
        {
            foreach (var serviceConfig in serviceConfigurations)
                await RegisterServiceAsync(serviceConfig);
        }

        public async Task<RegistryInformation> RegisterServiceAsync(ServiceConfiguration serviceConfig)
        {
            var serviceName = await GetServiceName(serviceConfig.Interface, serviceConfig.Assembly);
            var version = await GetVersionAsync(serviceConfig.Version);
            var uri = new Uri(serviceConfig.Address);
            var tags = new List<string>()
            {
                serviceConfig.Binding,
                serviceConfig.Security.ToString(),
                serviceConfig.Export
            };
            return await RegisterServiceAsync(serviceName, version, uri, tags);
        }

        public override async Task<RegistryInformation> RegisterServiceAsync(string serviceName, string version, Uri uri, List<string> tags = null)
        {
            var tagList = (tags ?? Enumerable.Empty<string>()).ToList();

            var registryInformation = new RegistryInformation
            {
                Name = serviceName,
                Id = await GetServiceIdAsync(serviceName, uri),
                Address = uri.ToString(),
                Host = uri.Host,
                Port = uri.Port,
                Version = version,
                Tags = tags ?? default(List<string>)
            };
            string path = zkClient.Create("/testUserNode", user, CreateMode.Persistent);

            //ServiceInstances.Add(registryInformation);
            return registryInformation;
        }

        public async Task<bool> DeregisterServiceAsync(string serviceId)
        {
            var instance = (await FindServicesAsync()).FirstOrDefault(x => x.Id == serviceId);
            if (instance != null)
            {
                ServiceInstances.Remove(instance);
                return true;
            }
            return false;
        }

        public Task<bool> DeregisterServiceAsync()
        {
            ServiceInstances = new List<RegistryInformation>();
            return Task.FromResult(true);
        }

        public Task<List<RegistryInformation>> FindServicesAsync()
        {
            return Task.FromResult(ServiceInstances);
        }

        public async Task<List<RegistryInformation>> FindServicesAsync(string name)
        {
            var instances = await FindServicesAsync();
            return instances.Where(x => x.Name == name).ToList();
        }

        public async Task<List<RegistryInformation>> FindServicesWithVersionAsync(string name, string version)
        {
            var instances = await FindServicesAsync(name);
            var range = new Range(version);
            return instances.Where(x => range.IsSatisfied(x.Version)).ToList();
        }

        public Task<List<RegistryInformation>> FindAllServicesAsync()
        {
            return Task.FromResult(ServiceInstances);
        }
    }
}
